package com.softway.diagnostic.bdd.steps;

import com.softway.diagnostic.exception.InvalidHealthIndexException;
import com.softway.diagnostic.model.Pathology;
import com.softway.diagnostic.service.DiagnosticService;
import io.cucumber.java.fr.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class DiagnosticSteps {

    private static final Logger logger = LoggerFactory.getLogger(DiagnosticSteps.class);

    @Autowired
    private DiagnosticService diagnosticService;
    private int healthIndex;
    private List<Pathology> pathologies;
    private Exception lastException;

    @√âtantdonn√©("la cabine d'auto-diagnostic est op√©rationnelle")
    public void laCabineDAutoDiagnosticEstOperationnelle() {
        logger.info("üîß Initialisation de la cabine d'auto-diagnostic...");
        assertNotNull(diagnosticService, "Le service doit √™tre inject√© par Spring");
        logger.info("‚úÖ Cabine op√©rationnelle !");
    }

    @√âtantdonn√©("un patient avec un index de sant√© de {int}")
    public void unPatientAvecUnIndexDeSanteDe(int index) {
        this.healthIndex = index;
        this.lastException = null;
        logger.info("üë§ Patient cr√©√© avec index de sant√©: {}", index);
    }

    @Quand("j'analyse l'index de sant√©")
    public void jAnalyseLIndexDeSante() {
        logger.info("üîç Analyse de l'index de sant√©: {}", healthIndex);
        
        try {
            // Test du VRAI service qu'on a cr√©√©
            pathologies = diagnosticService.analyzeHealthIndex(healthIndex);
            logger.info("üìä R√©sultat de l'analyse: {}", pathologies);
        } catch (InvalidHealthIndexException e) {
            this.lastException = e;
            logger.warn("‚ö†Ô∏è Index de sant√© invalide: {}", e.getMessage());
        } catch (Exception e) {
            this.lastException = e;
            logger.error("‚ùå Erreur lors de l'analyse: {}", e.getMessage());
        }
    }

    @Alors("le syst√®me doit d√©tecter un probl√®me cardiaque")
    public void leSystemeDoitDetecterUnProblemeCardiaque() {
        logger.info("‚ù§Ô∏è V√©rification probl√®me cardiaque...");
        assertTrue(pathologies.contains(Pathology.CARDIOLOGY));
        logger.info("‚úÖ Probl√®me cardiaque d√©tect√© !");
    }

    @Alors("le syst√®me doit d√©tecter une fracture")
    public void leSystemeDoitDetecterUneFracture() {
        logger.info("ü¶¥ V√©rification fracture...");
        assertTrue(pathologies.contains(Pathology.TRAUMATOLOGY));
        logger.info("‚úÖ Fracture d√©tect√©e !");
    }

    @Alors("le syst√®me ne doit d√©tecter aucune pathologie")
    public void leSystemeNeDoitDetecterAucunePathologie() {
        logger.info("üîç V√©rification aucune pathologie...");
        assertTrue(pathologies.isEmpty());
        logger.info("‚úÖ Aucune pathologie d√©tect√©e !");
    }

    @Alors("la r√©ponse doit indiquer {string}")
    public void laReponseDoitIndiquer(String expectedDepartments) {
        logger.info("üìã V√©rification r√©ponse: {}", expectedDepartments);
        
        if (expectedDepartments.isEmpty()) {
            assertTrue(pathologies.isEmpty());
        } else {
            String[] expected = expectedDepartments.split(", ");
            for (String dept : expected) {
                // Convertir le nom du d√©partement en enum Pathology
                Pathology expectedPathology = "Cardiologie".equals(dept) ? Pathology.CARDIOLOGY : 
                                            "Traumatologie".equals(dept) ? Pathology.TRAUMATOLOGY : null;
                assertNotNull(expectedPathology, "Pathologie inconnue: " + dept);
                assertTrue(pathologies.contains(expectedPathology), "Pathologie attendue: " + dept);
            }
        }
        logger.info("‚úÖ R√©ponse correcte !");
    }
    
    @Alors("le syst√®me doit rejeter l'index comme invalide")
    public void leSystemeDoitRejeterLIndexCommeInvalide() {
        logger.info("üö´ V√©rification rejet de l'index invalide...");
        assertNotNull(lastException, "Une exception doit avoir √©t√© lev√©e");
        assertTrue(lastException instanceof InvalidHealthIndexException, 
            "L'exception doit √™tre de type InvalidHealthIndexException");
        logger.info("‚úÖ Index rejet√© correctement !");
    }
}
